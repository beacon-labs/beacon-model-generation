
/*
 * BLInstanceBase
 * ------------------------------
 * An instance of a design
 *
 * IMPORTANT NOTE: DO NOT EDIT THIS FILE, edit bl_instance.h instead
 *
 */

#include "bl_instance_base.h"


string BLInstanceBase::get_name()
{
    return this->name;
}

void BLInstanceBase::observe_name(shared_ptr<IBLObserver<string>> observer)
{
    name_observers.push_back( observer );
}

void BLInstanceBase::set_name(string value)
{
    this->name = value;
    for ( shared_ptr<IBLObserver<string>> observer : name_observers )
    {
        observer->update( value );
    }
}


shared_ptr<BLDesign> BLInstanceBase::get_reference()
{
    return this->reference;
}

void BLInstanceBase::observe_reference(shared_ptr<IBLObserver<shared_ptr<BLDesign>>> observer)
{
    reference_observers.push_back( observer );
}

void BLInstanceBase::set_reference(shared_ptr<BLDesign> value)
{
    this->reference = value;
    for ( shared_ptr<IBLObserver<shared_ptr<BLDesign>>> observer : reference_observers )
    {
        observer->update( value );
    }
}


list<shared_ptr<BLPin>> BLInstanceBase::get_pins()
{
    return this->pins;
}

void BLInstanceBase::observe_pins(shared_ptr<IBLObserver<shared_ptr<BLPin>>> observer)
{
    pins_observers.push_back( observer );
}


void BLInstanceBase::add_pin(shared_ptr<BLPin> value)
{
    this->pins.push_back( value );
    for ( shared_ptr<IBLObserver<shared_ptr<BLPin>>> observer : pins_observers )
    {
        observer->update( value );
    }
}

